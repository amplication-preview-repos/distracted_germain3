/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TextInput } from "./TextInput";
import { TextInputCountArgs } from "./TextInputCountArgs";
import { TextInputFindManyArgs } from "./TextInputFindManyArgs";
import { TextInputFindUniqueArgs } from "./TextInputFindUniqueArgs";
import { CreateTextInputArgs } from "./CreateTextInputArgs";
import { UpdateTextInputArgs } from "./UpdateTextInputArgs";
import { DeleteTextInputArgs } from "./DeleteTextInputArgs";
import { TextInputService } from "../textInput.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TextInput)
export class TextInputResolverBase {
  constructor(
    protected readonly service: TextInputService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TextInput",
    action: "read",
    possession: "any",
  })
  async _textInputsMeta(
    @graphql.Args() args: TextInputCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TextInput])
  @nestAccessControl.UseRoles({
    resource: "TextInput",
    action: "read",
    possession: "any",
  })
  async textInputs(
    @graphql.Args() args: TextInputFindManyArgs
  ): Promise<TextInput[]> {
    return this.service.textInputs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TextInput, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TextInput",
    action: "read",
    possession: "own",
  })
  async textInput(
    @graphql.Args() args: TextInputFindUniqueArgs
  ): Promise<TextInput | null> {
    const result = await this.service.textInput(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TextInput)
  @nestAccessControl.UseRoles({
    resource: "TextInput",
    action: "create",
    possession: "any",
  })
  async createTextInput(
    @graphql.Args() args: CreateTextInputArgs
  ): Promise<TextInput> {
    return await this.service.createTextInput({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TextInput)
  @nestAccessControl.UseRoles({
    resource: "TextInput",
    action: "update",
    possession: "any",
  })
  async updateTextInput(
    @graphql.Args() args: UpdateTextInputArgs
  ): Promise<TextInput | null> {
    try {
      return await this.service.updateTextInput({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TextInput)
  @nestAccessControl.UseRoles({
    resource: "TextInput",
    action: "delete",
    possession: "any",
  })
  async deleteTextInput(
    @graphql.Args() args: DeleteTextInputArgs
  ): Promise<TextInput | null> {
    try {
      return await this.service.deleteTextInput(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
