/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { GraphQLUpload } from "graphql-upload";
import { FileUpload } from "src/storage/base/storage.types";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Customization } from "./Customization";
import { CustomizationCountArgs } from "./CustomizationCountArgs";
import { CustomizationFindManyArgs } from "./CustomizationFindManyArgs";
import { CustomizationFindUniqueArgs } from "./CustomizationFindUniqueArgs";
import { CreateCustomizationArgs } from "./CreateCustomizationArgs";
import { UpdateCustomizationArgs } from "./UpdateCustomizationArgs";
import { DeleteCustomizationArgs } from "./DeleteCustomizationArgs";
import { CustomizationService } from "../customization.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Customization)
export class CustomizationResolverBase {
  constructor(
    protected readonly service: CustomizationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Customization",
    action: "read",
    possession: "any",
  })
  async _customizationsMeta(
    @graphql.Args() args: CustomizationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Customization])
  @nestAccessControl.UseRoles({
    resource: "Customization",
    action: "read",
    possession: "any",
  })
  async customizations(
    @graphql.Args() args: CustomizationFindManyArgs
  ): Promise<Customization[]> {
    return this.service.customizations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Customization, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Customization",
    action: "read",
    possession: "own",
  })
  async customization(
    @graphql.Args() args: CustomizationFindUniqueArgs
  ): Promise<Customization | null> {
    const result = await this.service.customization(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Customization)
  @nestAccessControl.UseRoles({
    resource: "Customization",
    action: "create",
    possession: "any",
  })
  async createCustomization(
    @graphql.Args() args: CreateCustomizationArgs
  ): Promise<Customization> {
    return await this.service.createCustomization({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Customization)
  @nestAccessControl.UseRoles({
    resource: "Customization",
    action: "update",
    possession: "any",
  })
  async updateCustomization(
    @graphql.Args() args: UpdateCustomizationArgs
  ): Promise<Customization | null> {
    try {
      return await this.service.updateCustomization({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Customization)
  @nestAccessControl.UseRoles({
    resource: "Customization",
    action: "delete",
    possession: "any",
  })
  async deleteCustomization(
    @graphql.Args() args: DeleteCustomizationArgs
  ): Promise<Customization | null> {
    try {
      return await this.service.deleteCustomization(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Customization)
  async uploadBackgroundMusic(
    @graphql.Args({
      name: "file",
      type: () => GraphQLUpload,
    })
    file: FileUpload,
    @graphql.Args()
    args: CustomizationFindUniqueArgs
  ): Promise<Customization> {
    return await this.service.uploadBackgroundMusic(args, file);
  }

  @graphql.Mutation(() => Customization)
  async deleteBackgroundMusic(
    @graphql.Args()
    args: CustomizationFindUniqueArgs
  ): Promise<Customization> {
    return await this.service.deleteBackgroundMusic(args);
  }
}
