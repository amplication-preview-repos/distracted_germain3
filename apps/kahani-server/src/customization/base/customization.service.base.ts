/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Customization as PrismaCustomization } from "@prisma/client";
import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class CustomizationServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(
    args: Omit<Prisma.CustomizationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customization.count(args);
  }

  async customizations(
    args: Prisma.CustomizationFindManyArgs
  ): Promise<PrismaCustomization[]> {
    return this.prisma.customization.findMany(args);
  }
  async customization(
    args: Prisma.CustomizationFindUniqueArgs
  ): Promise<PrismaCustomization | null> {
    return this.prisma.customization.findUnique(args);
  }
  async createCustomization(
    args: Prisma.CustomizationCreateArgs
  ): Promise<PrismaCustomization> {
    return this.prisma.customization.create(args);
  }
  async updateCustomization(
    args: Prisma.CustomizationUpdateArgs
  ): Promise<PrismaCustomization> {
    return this.prisma.customization.update(args);
  }
  async deleteCustomization(
    args: Prisma.CustomizationDeleteArgs
  ): Promise<PrismaCustomization> {
    return this.prisma.customization.delete(args);
  }

  async uploadBackgroundMusic<T extends Prisma.CustomizationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomizationFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaCustomization> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "backgroundMusic";
    const backgroundMusic = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.customization.update({
      where: args.where,

      data: {
        backgroundMusic: backgroundMusic as InputJsonValue,
      },
    });
  }

  async downloadBackgroundMusic<T extends Prisma.CustomizationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomizationFindUniqueArgs>
  ): Promise<FileDownload> {
    const { backgroundMusic } =
      await this.prisma.customization.findUniqueOrThrow({
        where: args.where,
      });

    return await this.localStorageService.downloadFile(
      backgroundMusic as unknown as LocalStorageFile
    );
  }

  async deleteBackgroundMusic<T extends Prisma.CustomizationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomizationFindUniqueArgs>
  ): Promise<PrismaCustomization> {
    const { backgroundMusic } =
      await this.prisma.customization.findUniqueOrThrow({
        where: args.where,
      });

    await this.localStorageService.deleteFile(
      backgroundMusic as unknown as LocalStorageFile
    );

    return await this.prisma.customization.update({
      where: args.where,

      data: {
        backgroundMusic: Prisma.DbNull,
      },
    });
  }
}
